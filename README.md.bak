# PC Beta Backbone Backend

A modern NestJS backend for the PC Beta Backbone platform with comprehensive authentication, user management, content management, and email notification features.

## Overview

PC Beta Backbone Backend is a production-ready NestJS application built with TypeScript that provides a robust API for web and mobile applications. It includes JWT authentication, PostgreSQL database integration, comprehensive security features, and full API documentation.

## Features

- **Modern NestJS Framework**: Built with NestJS 10+ and TypeScript
- **Database Integration**: PostgreSQL with TypeORM for robust data management
- **Authentication**: JWT-based authentication with Passport
- **API Documentation**: Swagger UI available at `/api/docs`
- **Security**: Helmet, rate limiting, and CORS configuration
- **Email Integration**: Email notifications and automation
- **Health Monitoring**: Endpoints for system health checks
- **Logging**: Winston logger for comprehensive application logging
- **Testing**: Jest setup for unit and integration testing
- **Code Quality**: ESLint and Prettier for consistent code style
- **Deployment Ready**: Docker and Railway.app configuration included

## Core Modules

- **Auth Module**: User registration, login, and JWT authentication
- **User Module**: User management and profile operations
- **Post Module**: Content creation and management
- **Email Module**: Email notification system
- **Health Module**: System health monitoring

## Prerequisites

- Node.js (v16+)
- npm or yarn
- PostgreSQL database
- Git

## Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/BluenSaint/PC-BETA-BACKBONE-BACKEND.git
   cd PC-BETA-BACKBONE-BACKEND
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Create a `.env` file based on `.env.example`:
   ```bash
   cp .env.example .env
   ```

4. Update the `.env` file with your configuration values.

5. Start the development server:
   ```bash
   npm run start:dev
   ```

## Environment Variables

The following environment variables are required:

- `DATABASE_URL`: PostgreSQL connection string
- `JWT_SECRET`: Secret key for JWT token generation
- `PORT`: Application port (default: 3000)
- `NODE_ENV`: Environment (development, production, test)
- `FRONTEND_URL`: URL of the frontend application for CORS

## API Endpoints

### Authentication
- `POST /api/auth/register`: Register a new user
- `POST /api/auth/login`: Login and get access token
- `GET /api/auth/profile`: Get current user profile (protected)

### Users
- `GET /api/users`: Get all users (protected)
- `GET /api/users/:id`: Get user by ID (protected)
- `PATCH /api/users/:id`: Update user (protected)
- `DELETE /api/users/:id`: Delete user (protected)

### Posts
- `GET /api/posts`: Get all posts
- `GET /api/posts/:id`: Get post by ID
- `POST /api/posts`: Create new post (protected)
- `PATCH /api/posts/:id`: Update post (protected)
- `DELETE /api/posts/:id`: Delete post (protected)

### Email
- `POST /api/email/send`: Send email notification (protected)

### Health
- `GET /api/health`: Check system health

## Development

### Running Tests
```bash
# Unit tests
npm run test

# E2E tests
npm run test:e2e

# Test coverage
npm run test:cov
```

### Linting and Formatting
```bash
# Lint code
npm run lint

# Format code
npm run format
```

## Deployment

### Docker
A Dockerfile is included for containerization:

```bash
# Build Docker image
docker build -t pc-beta-backbone-backend .

# Run Docker container
docker run -p 3000:3000 pc-beta-backbone-backend
```

### Railway
This project includes configuration for deployment on Railway:

1. Push your code to GitHub
2. Connect your GitHub repository to Railway
3. Railway will automatically deploy your application

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
